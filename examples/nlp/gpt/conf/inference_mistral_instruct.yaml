trainer:
  num_nodes: 1
  devices: 8
  accelerator: gpu
  logger: False # logger provided by exp_manager
  precision: bf16 # 16, 32, or bf16

inference:
  port: 5555 # the port number for the inference server
  host: "0.0.0.0"
  model_name: "mistral_instruct_12b"

  # a PyTriton parameter to specify
  # the max time a request will be delayed in the scheduling queue
  # to wait for additional requests for batching
  # for more info see: https://github.com/triton-inference-server/pytriton/blob/9e789db73880ecc667845455bbd2c19601e6279b/pytriton/model_config/common.py#L76
  max_queue_delay_microseconds: 2000

  # this parameter tells PyTriton what our preferred batch sizes are
  # for request batching. This parameter is distinct from
  # the model.forward_micro_batch_size to optimize for cases where Pipeline Parallelism
  # is enabled. Because in that case we will want PyTriton to give us
  # a very large batch, but then in the model we will cut it into smaller
  # batches (determined by model.forward_micro_batch_size) to fill the pipe better.
  # NOTE: this parameter can be a list as well, in that case we will give a list of preferred batch
  # sizes to PyTriton
  inference_micro_batch_size: ${model.forward_micro_batch_size}

  # strips the padded sequence length from requests that come in
  # when requests are sent with token, sequence length format
  # we will look at the sequence length and see if we can strip
  # the request to a lower sequence length that is a multiple of
  # the specified below
  strip_sequence_length_to_multiple: null

  greedy: False # Whether or not to use sampling ; use greedy decoding otherwise
  top_k: 0  # The number of highest probability vocabulary tokens to keep for top-k-filtering.
  top_p: 0.9 # If set to float < 1, only the most probable tokens with probabilities that add up to top_p or higher are kept for generation.
  temperature: 0.35 # sampling temperature
  add_BOS: False # add the bos token at the begining of the prompt
  tokens_to_generate: 1024 # The minimum length of the sequence to be generated.
  all_probs: False  # whether return the log prob for all the tokens in vocab
  repetition_penalty: 1.2  # The parameter for repetition penalty. 1.0 means no penalty.
  min_tokens_to_generate: 0  # The minimum length of the sequence to be generated.
  compute_logprob: False  # a flag used to compute logprob of all the input text, a very special case of running inference, default False
  end_strings: ["<|endoftext|>"]  # generation will stop when one of these tokens is generated


model_file: null

model:
  forward_micro_batch_size: 4
  sequence_parallel: False
  activations_checkpoint_granularity: null
  activations_checkpoint_method: null
  precision: ${trainer.precision}

